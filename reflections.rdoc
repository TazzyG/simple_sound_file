A simple app with sound for Mariam's project

Step 1 - I set up a new ruby workspace in Cloud9

Step 2 - /workspace $  rails g scaffold Words english:string afar:string category_id:integer 

            This will create models, and controllers, and views
            This other choice was to follow the lesson in Getting Started, building controllers, and models as separate steps.
  
Step 3 - Open the folder in my db/migrate to see that rails gave us a new present (a new migration to the database)         
            Based on the above, it looks like this...
                class CreateWords < ActiveRecord::Migration
              def change
                create_table :words do |t|
                  t.string :english
                  t.string :afar
                  t.integer :category_id
            
                  t.timestamps null: false
                end
              end
            end
            http://edgeguides.rubyonrails.org/active_record_migrations.html
            
            To get there from your project. 
            If you would like to add the colum :afar (optional) you can do that with 
            /workspace $  rails g migrations add :afar_to_words  afar:string 
            
Step 4 - Checkout the controller and view folders, more presents from Rails. They have added a model, controller and views for Word.

Step 5 - My curiosity makes me want to see what we have if we run in the console... 
         /workspace $   rails s -b $IP -p $PORT
         Oh - The Active Record message told me this...
         Migrations are pending. To resolve this issue, run: bin/rake db:migrate RAILS_ENV=development
         
         I forgot to migrate. Let's do that. 
         
Step 3 (forgot to migrate)  /workspace $ bin/rake db:migrate RAILS_ENV=development, Yeah! I got the famous Rails page. 
https://rakiibo-tazzyg1.c9users.io/

Step 6 - Let's see what happens if I try https://rakiibo-tazzyg1.c9users.io/words ... Wow, another surprise! I can see my words. 

Step 7 - Let's take a look at config/routes and see what is there. Look at that, that rails g scaffold is great! It set up a root for word. 
            I see we have a form too, let's try it!  
            It works! 
        What do you say, I think we should save this in Git. I am not going to push this to Heroku. I have decised I will save this in git instead of bitbuck
        
Step 8 - Let's save this to git. Reference "RailsTutorial.org" I picked Chapter 2 (any part with the Git steps)
            $ git init
            $ git add -A
            $ git commit -m "Initialize repository"

            I created a new repository and will copy it per the instructions in github (same as in bitbucket)
            Got an error fatal: remote origin already exists... googled it, used this solution
            http://stackoverflow.com/questions/1221840/remote-origin-already-exists-on-git-push-to-a-new-repository
            It worked  https://github.com/TazzyG/word_app
Step 9 - Sound... Ick! - The nasty challenge. 

Upload sample sound files and name it the same as the word I am going to make. 
            Created new folder in assets - audios
            Upload a couple files
            
I got the same problem, only the first sound was playing when I clicked it. I tried a few things.
Then I remembered that it works in show.html. So, it looks like javascript takes the sound once and does not recognize what is going on in ruby each loops.
I am sure there is a fix for that, but I am still new at getting ruby and javascript to work together. 

So, another approach. 

I tried putting the sound code into show and making it play on click. That works. 
https://rakiibo-tazzyg1.c9users.io/words

Step 10 - Now how about categories?
Approach. Different from the getting started link, I am just going to create a new model for category and relate them to word.

Step 11 - rails g model categories name:string icon:string  before that... Time to do a git push first
Done, migrate file looks good so bin/rake db:migrate

Step 12, I will associate them in the models (belongs_to, has_many)

Step 13, Create a controller for categories  ... rails g controller Categories

Step 14, create views, and controller, add route. 

Step 15 - Time to stop. No css, I did not add bootstrap. 
Note: I am going to change the root path to categories, index 

Played with it, it looks good now. 



    


            
         
        
        
            
    


